# Analysis

You will start this session with your cleaned data ready to use in R. By the end of the session you will have computed the test statistic, produced some visualizations of your data, and be ready to present and write up your findings.


### Goals

- Describe and visualize your data
- Perform the appropriate analysis
- Interpret the results


## Analyzing data in R

Running with my example from last week, I want to compare average extraversion scores between Leos and Pisces. I made a data.frame with just those columns; recoded the Zodiac labels and reverse-scored one of the extraversion items; and computed an extraversion mean score. To refresh your memory, here's the entire pipeline from start to finish:


```{r}
#| warning: false
#| message: false

library(tidyverse)

data_cleaned <- read_csv("data/gss_2006.csv") |> 
  select(extraversion1 = big5a1, 
         extraversion2 = big5a2,
         zodiac) |> 
  mutate(zodiac = factor(zodiac, levels = c(5, 12), labels = c("Leo", "Pisces"))) |> 
  mutate(extraversion2 = 6 - extraversion2) |> 
  mutate(extraversion_mean = rowMeans(across(c(extraversion1, extraversion2)))) |> 
  drop_na()

```

### Describing your data

The most common descriptive statistics are the mean ($M$) and standard deviation ($SD$). You should report these for each variable in your analysis.

You can find these for a set of numbers using R's built-in `mean()` and `sd()` functions.

```{r}
mean(data_cleaned$extraversion1)
sd(data_cleaned$extraversion1)
```

This might be a perfectly appropriate approach, but with a lot of variables it might not be the most efficient. A more powerful approach is to use `tidyverse` `summarize()` function. There you can create any number of named variables, each computing some kind of summary. The biggest advantage is you can specific a grouping variable using the `.by` argument. This means that each of the statistics you ask for will be computed separately for each category of the grouping variable.

```{r}
data_cleaned |>
  summarize(n = n(),
            mean = mean(extraversion_mean), 
            sd = sd(extraversion_mean),
            .by = zodiac)
```

When it comes to visualizing the data later, I will want to show the *confidence interval* associated with each group mean. I can compute this right now as part of `summarize`. There's no built-in confidence interval function, but we can easily make one ourselves.

```{r}
ci <- function(x) {
  qt(.975, df = length(x) - 1) * sqrt( var(x) / length(x) )
}
```

And, having created the function, use it within `summarize()` just like any other function.

```{r}

summary <- data_cleaned |>
  summarize(n = n(),
            mean = mean(extraversion_mean), 
            sd = sd(extraversion_mean),
            ci = ci(extraversion_mean),
            .by = zodiac)

summary
```

### Visualizing the data

In addition to reporting the mean and standard deviation, it is useful to visualize the distribution of the data. This can reveal nuances that are not obvious in those single numeric summary values.

As with most things, there are a lot of different ways of producing graphs using R. One of the most widely used and powerful is the `ggplot2` package.^[The `ggplot2` package is part of the `tidyverse`, so because we already ran `library(tidyverse)` earlier the `ggplot2` functions are already available to us. If you needed to, you could always run `library(ggplot2)` to activate it separately.] The name refers to the idea of the "grammar of graphics", and it is built around a layering approach. You first specify your data and aesthetics (what should data will go on the x and y axes), then geometry (do you want data to be represented by points or bars or as a histogram?), any scaling (e.g. what values should be labeled on each axis), and theme elements (how do you want the plot to look generally?). There can be a lot of complexity, but building things up layer by layer, gradually adding and refining elements, is a powerful and satisfying approach.

Here's a simple histogram of the first extraversion item. I pipe the data into the `ggplot()` function, specifying that I want the `extraversion1` column to be represented as the `x` aesthetic. Then I add geometry using `geom_histogram`. That geom function automatically computes bins and counts; here I just specify I want a `binwidth` of 1, i.e. each column of the histogram will represent one scale point. Note that ggplot layers are added using `+` rather than the usual `|>` pipe.


```{r}
#| label: fig-extraverted-no-theme
#| fig-cap: Histogram of responses to "extraverted, enthusiastic" TIPI item

data_cleaned |> 
  ggplot(aes(x = extraversion1)) +
  geom_histogram(binwidth = 1)

```


The default theme is perfectly serviceable, but you can customize every element. Here I'll specify a couple of aspects using the `theme()` function, and I'll assign it to the name `theme_apa`. Then I can always add `theme_apa` as a layer to my plots going forward. 

```{r}

theme_apa <- theme(
  panel.background = element_blank(),
  axis.line = element_line()
)

```

I'll also customize the "breaks" on the x-axis (where the ticks and numeric labels go) and the axis labels.

```{r}
#| label: fig-extraverted
#| fig-cap: Histogram of responses to "reserved" TIPI item

data_cleaned |> 
  ggplot(aes(x = extraversion1)) +
  geom_histogram(binwidth = 1, color = "white") +
  scale_x_continuous(breaks = 1:5) +
  labs(x = "Responses to extraversion item 1: reserved",
       y = "Number of responses") +
  theme_apa

```

Here's a histogram of the other extraversion item.

```{r}
#| label: fig-reserved
#| fig-cap: Histogram of responses to "outgoing, sociable" TIPI item

data_cleaned |> 
  ggplot(aes(x = extraversion2)) +
  geom_histogram(binwidth = 1, color = "white") +
  scale_x_continuous(breaks = 1:5) +
  labs(x = "Responses to extraversion item 2: outgoing, sociable",
       y = "Number of responses") +
  theme_apa

```

And here's a histogram of the average extraversion scores I computed.

```{r}
#| label: fig-extraversion-mean
#| fig-cap: Histogram of average scores on TIPI Extraversion subscale

data_cleaned |> 
  ggplot(aes(x = extraversion_mean)) +
  geom_histogram(binwidth = 0.5, color = "white") +
  scale_x_continuous(breaks = 1:7) +
  labs(x = "Average scores across both TIPI extraversion items",
       y = "Count") +
  theme_apa

```

Notice that while both individual extraversion items were a bit skewed, the distribution of averages is approximately normally-distributed (albeit with a big spike in the middle).


## Hypothesis test

### The $t$ statistic

The $t$-test can be computed with a single line of code, as you'll see. But it's important to understand the math happening behind the scenes.

If you need to refresh your memory from a past statistics class, refer to [the $t$-test Appendix](appendix-t-test.qmd).



### The $t$-test

R has a built-in `t.test()` function. When the data is organized with one column containing the grouping variable (the IV) and one column containing the numeric DV scores, the `t.test` function requires a "formula" argument. This allows us to provide the names of those columns in the format "DV ~ IV", i.e. compare scores on the DV across the groups of the IV. We also supply a "data" argument which points R to the data.frame containing those columns, and we can perform the $t$-test with the assumption of equal variances by stating `var.equal = TRUE` as another argument.


```{r}
t.test(formula = extraversion_mean ~ zodiac, data = data_cleaned, var.equal = TRUE)
```

### Visualizing the difference

Lastly, it is always helpful to visualize the comparison that the $t$-test is making, to supplement the numeric results. One option is a bar graph in which the height of each bar represents the mean score for each group. We can also add error bars showing those confidence intervals we computed earlier.


```{r}
summary |> 
  ggplot(aes(x = zodiac, y = mean)) +
  geom_col() +
  geom_errorbar(aes(ymax = mean + ci, ymin = mean - ci), width = 0.2) +
  coord_cartesian(ylim = c(1, 5)) +
  theme_apa
```


## To do for next time

Prepare your presentation! Share your google slides with Prof. Brotherton in advance. See guidelines under [next week's lab section](t-test_4_zodiac.qmd).
