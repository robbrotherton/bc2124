# Data preparation

You should begin this session with your Big 5 trait (dependent variable) and Zodiac signs (quasi-independent variable) in mind for your analysis. In class we will introduce the R language and RStudio environment, and demonstrate necessary data cleaning and manipulation in preparation for analysis. By the end of the class you should have modified the example code to work with your selected variables.

### Goals

-   Get your R environment set up
-   Read the data you need into R
-   Select required variables
-   Filter the data based on completeness (and any other criteria)
-   Compute any required variables (scale means, number of items missing, etc)

## Working with data in R

### Getting R ready

To start exploring the data in R, you first need to set up your environment. While "base" R (meaning all the functions built in to the R language) can do everything we need, a feature of R that makes it well-suited for data analysis is that you can easily install additional "packages" that make common tasks, like data cleaning and visualization, even easier. In particular, we will use a family of related packages called the "tidyverse". Usually this would need to be installed like so:

```{r}
#| eval: false

install.packages("tidyverse")

```

However the Projects template I set up for you in posit.cloud already has the package installed. Packages only need to be installed once, so there's no need for you to do so again. You will, however, need to 'activate' the packages using the `library()` function to make their functions available.

```{r}
#| warning: false
#| message: false

library(tidyverse)

```

### Getting data into R

Getting data into R often involves reading in a .csv (comma-separated values) spreadsheet file that you downloaded to your computer. Indeed, you can go to the GSS website and download the data in a variety of forms. For our convenience, I have already done that. Your posit.cloud project has a folder called `data` and inside that folder there is a file named `gss_2006.csv`. That's the complete GSS data for the year 2006. To start working with that data, we first need to 'read' it into R.

```{r}

data <- read_csv("data/gss_2006.csv")

```

When you execute the code you won't see any output, but you should see the name `data` (or whatever name you assigned the result of `read_csv()` to) appear in your Environment pane. That is now an object in R called a data.frame. You can think of it as a spreadsheet like you're familiar with from Excel or Google Sheets; a set of columns, one for each variable in the dataset, and a row for each participant's answers. In fact, you can also click on the name in the Environment pane to view the data in a new tab, just like looking at a spreadsheet. Or you can see a preview of the full spreadsheet using code:

```{r}
head(data)
```

### Select your variables

As you can see, the data.frame contains a *lot* of variables; there are `r ncol(data)` columns of data. You'll only need a few of those. So the first step is selecting just the variables you need to work with.

There are a lot of ways to do this. The simplest would be to make a note of the variable IDs from the codebook and pipe the full data.frame into the `select()` function.[^t-test_2_zodiac-1] This allows us to simply type in variable names separated by commas. Since I'll probably forget which ID is which, I'll give the columns more meaningful names as I select them.

[^t-test_2_zodiac-1]: The `select()` function, along with `filter()`, `mutate()`, `across()`, `everything()`, and others that you'll see in my example code, is part of the `tidyverse` family of packages (specifically these all come from the `dplyr` package, but we'll also use functions from other `tidyverse` packages like `tidyr` and `ggplot2`). There are other ways to do all these things without using `tidyverse` packages, just relying on what's referred to as "base" R functions. The `tidyverse` approach just makes this kind of data manipulation generally easier and makes the code more interpretable. If you're curious to see how base R and tidyverse functions differ in syntax, a good place to start is <https://dplyr.tidyverse.org/articles/base.html>.

```{r}

data <- data |> 
  select(extraversion1 = big5a1, 
         extraversion2 = big5a2,
         zodiac)
```

Let's see what this new data.frame looks like:

```{r}
head(data)

```

Another useful thing you can ask for is a `summary()` of your data.frame:

```{r}
summary(data)
```

I also recommend that you always inspect the data more extensively by eye (click the name in your Environment to open a tab showing the data and scroll down a bit). Generally it's looking good, but there are a few issues we need to address before we can properly describe and analyze the data.

### Cleaning the data

You'll notice that the Zodiac data is coded as numbers; it would be helpful to turn those into labels. Also you might have noticed when looking in the codebook that one of your personality questions is worded positively (so that higher numbers mean a higher score on that personality trait) but the other is worded negatively (so that higher scores mean less of that trait). We need to make those consistent by reverse-coding the negatively-worded one before we can compute an average score.

#### Re-labelling categorical variables

First let's label the `zodiac` column. The original data is recorded as the numbers 1 through 12 corresponding to the 12 star signs. Since R doesn't know any better, it assumes these numbers should be treated as regular numbers, so it will compute an average score and things like that even though you and I know it doesn't make a lot of sense to compute the average star sign for a bunch of people. It would make more sense to turn that variable into a "factor", meaning a categorical variable. 

To change something about the data like this, we can use the `mutate()` function. It can either create a new column or change the data in an existing column, depending on the name you specify first. After the name, the equals sign indicates what that resulting column will contain. In this case, we use the `factor()` function to create the new factor data. It consists of the original numeric `zodiac` data where the original score (the `level` of the resulting factor) is either 5 or 12; those numbers will be assigned `labels` "Leo" and "Pisces" respectively. Since for this project you are comparing just two signs, you only need to explicitly label those two. The others then become missing data (represented as `NA`).

```{r}
data_cleaned <- data |> 
  mutate(zodiac = factor(zodiac, levels = c(5, 12), labels = c("Leo", "Pisces")))
```

#### Re-coding numeric variables

For the personality trait questions, or goal is to eventually average each participants' answers to the two questions. However, remember that one question is positively-worded and the other negatively-worded, so it wouldn't make sense to average them together just yet. To add to the confusion, as the codebook shows, the original data is coded so that 1 indicates "strongly agree" and 5 indicates "strongly disagree". We want higher scores to indicate more of the trait in question, so we need to be careful about this.

For extraversion, item `big5a1` (which I renamed `extraversion1`) is "reserved", while item `big5a2` (renamed `extraversion2`) is "outgoing, sociable". Since right now a higher numeric score means the participant *disagreed* with the description, for the first question, a higher score means more extraversion. It is actually the second question--the positively-worded one--that we need to reverse-code.

Since answers can range from 1 to 5, an easy way to reverse the scores is to subtract the participant's response from 6; 1 becomes 5, 2 becomes 4, etc. (Note the use of `mutate()` again to computationally change something about the data.)

```{r}
data_cleaned <- data_cleaned |> 
  mutate(extraversion2 = 6 - extraversion2)
```

Make sure to identify the correct item for your trait; for some it is the first question whereas for others it is the second.

#### Computing a scale average

Now that both questions are scored consistently, the only thing that remains is to compute the average of the two for each participant. We'll create this new column using `mutate()` once again. The average score is computed by the `rowMeans()` function, which produces an average score for each row in the data. We need to tell it which columns to average across, using the `across()` function within which we specify the two personality trait columns by name.

```{r}
data_cleaned <- data_cleaned |> 
  mutate(extraversion_mean = rowMeans(across(c(extraversion1, extraversion2))))
  
```

#### Handle missing data

One last thing; notice that the data contains a *lot* of missing data now, because we dropped anyone who wasn't one of the two star signs we were interested in, and a lot of people were missing the Big 5 data in the first place. We might as well tidy things up, because if someone is missing one or both of the personality average score or star sign, they are no use to us.

```{r}
data_cleaned <- data_cleaned |> 
  drop_na()
```

Let's see how it looks.

```{r}
summary(data_cleaned)
```

Phew. We have our two extraversion items (one reverse-coded), the Zodiac labels, and the computed extraversion mean scores for each of the `r nrow(data_cleaned)` participants with complete data. We're ready to analyze the data!

Notice that the number of rows in the data.frame has changed, because rows that didn't meet that condition have been dropped.

```{r}
nrow(data)
nrow(data_cleaned) 
```

```{r}
#| echo: false
leos <- nrow(filter(data_cleaned, zodiac == "Leo"))
pisces <- nrow(filter(data_cleaned, zodiac == "Pisces"))
```

After filtering to keep only rows with complete data, we're left with `r format(nrow(data_cleaned), big.mark = ",")` valid responses (`r leos` Leos and `r pisces` Pisces).

## To do for next time

Read and take notes on another of the research papers listed under [Lab @sec-astro-refs]
