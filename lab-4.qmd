# Lab 4: Analysis {.unnumbered}

You will start this session with your cleaned data ready to use in R. By the end of the session you will have computed the correlation statistic, produced some visualizations of your data, and be ready to present and write up your findings.


## Goals

- Describe and visualize your variables
- Understand what the correlation statistic quantifies
- Perform the appropriate correlational analysis on your data
- Interpret the results


## Analyzing data in R

Running with my example from last week, my variables were avearge extraversion scores and the Democratic Party feeling thermometer score. I made a data.frame with just those variables, filtered the data down to complete, valid responses, recoded the negatively-worded item, and computed an extraversion mean score. To refresh your memory, here's the entire pipeline from start to finish:

```{r}
#| warning: false
#| message: false

library(tidyverse)
library(anesr)
data(timeseries_2016)

my_data_complete <- timeseries_2016 |> 
  select(extraversion1 = "V162333", 
         extraversion2 = "V162338", ,
         feeling_thermometer = "V161095") |> 
  filter(if_all(contains("extraversion"), ~ . %in% 1:7))  |> 
  filter(feeling_thermometer >= 0) |> 
  mutate(extraversion2 = 8 - extraversion2,
         extraversion_mean = rowMeans(across(contains("extraversion"))))

```



### Describing your data


```{r}

my_data_complete |> 
  mutate(across(everything(), as.numeric)) |> 
  pivot_longer(everything()) |> 
  summarize(n = n(),
            mean = mean(value), 
            sd = sd(value),
            .by = name)

```


### Visualizing the data

As with most things, there are a lot of different ways of producing graphs using R. One of the most widely used and powerful is the `ggplot2` package.^[The `ggplot2` package is part of the `tidyverse`, so because we already ran `library(tidyverse)` earlier the `ggplot2` functions are already available to us. If you needed to, you could always run `library(ggplot2)` to activate it separately.] The name refers to the idea of the "grammar of graphics", and it is built around a layering approach. You first specify your data and aesthetics (what should data will go on the x and y axes), then geometry (do you want data to be represented by points or bars or as a histogram?), any scaling (e.g. what values should be labeled on each axis), and theme elements (how do you want the plot to look generally?). There can be a lot of complexity, but building things up layer by layer, gradually adding and refining elements, is a powerful and satisfying approach.



```{r}
#| label: fig-extraverted-no-theme
#| fig-cap: Histogram of responses to "extraverted, enthusiastic" TIPI item

my_data_complete |> 
  ggplot(aes(x = extraversion1)) +
  geom_histogram(binwidth = 1)

```

The default theme is perfectly serviceable, but you can customize every element. Here I'll specify a couple of aspects using the `theme()` function, and I'll assign it to the name `theme_apa`. Then I can always add `theme_apa` as a layer to my plots going forward. 

```{r}

theme_apa <- theme(
  panel.background = element_blank(),
  axis.line = element_line()
)

```

```{r}
#| label: fig-extraverted
#| fig-cap: Histogram of responses to "extraverted, enthusiastic" TIPI item

my_data_complete |> 
  ggplot(aes(x = extraversion1)) +
  geom_histogram(binwidth = 1, color = "white") +
  scale_x_continuous(breaks = 1:7) +
  theme_apa

```


```{r}
#| label: fig-reserved
#| fig-cap: Histogram of responses to "reserved, quiet" TIPI item

my_data_complete |> 
  ggplot(aes(x = 8 - extraversion2)) +
  geom_histogram(binwidth = 1, color = "white") +
  scale_x_continuous(breaks = 1:7) +
  theme_apa

```

```{r}
#| label: fig-extraversion-mean
#| fig-cap: Histogram of average scores on TIPI Extraversion subscale

my_data_complete |> 
  ggplot(aes(x = extraversion_mean)) +
  geom_histogram(binwidth = 0.5, color = "white") +
  scale_x_continuous(breaks = 1:7) +
  theme_apa

```

```{r}
#| label: fig-thermometer
#| fig-cap: Histogram of responses to Democratic Party feeling thermometer

my_data_complete |> 
  ggplot(aes(x = feeling_thermometer)) +
  geom_histogram(binwidth = 1, color = "white") +
  scale_x_continuous(breaks = seq(from = 0, to = 100, by = 10)) +
  theme_apa

```



## Correlation analysis

### The correlation statistic

The correlation statistic can be computed with a single line of code, as you'll see. But it's important to understand the math happening behind the scenes.



### Correlation in R



The data is ready to be analyzed. The correlation between two variables can be found using the `cor()` function.
```{r}

cor(x = my_data_complete$extraversion_mean, 
    y = my_data_complete$feeling_thermometer)

```


If you got an answer of `NA` instead of a number, it is probably because your data has some missing data. You just need to tell `cor()` to only use data for which both pairs of values are nonmissing:

```{r}

cor(x = my_data_complete$extraversion_mean, 
    y = my_data_complete$feeling_thermometer,
    use = "pairwise.complete.obs")

```



```{r}
#| label: fig-scatter
#| fig-cap: Scatterplot (with jitter) of average extraversion scores and feeling thermometer scores

my_data_complete |> 
  ggplot(aes(x = extraversion_mean, y = feeling_thermometer)) +
  geom_point(position = position_jitter(width = 0.4, height = 0), 
             alpha = 0.1) +
  scale_x_continuous(breaks = 1:7) +
  scale_y_continuous(breaks = seq(from = 0, to = 100, by = 10)) +
  theme_apa

```
